{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{{ attach_library('aces_theme/program_explorer') }}

{% set max_width = 'full-width' %}

{%
  set classes = [
  'paragraph',
  'paragraph--type--' ~ paragraph.bundle|clean_class,
  view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
  not paragraph.isPublished() ? 'paragraph--unpublished',
  'col-lg-12 col-md-12 col-sm-12 flex', max_width
  ]
%}

<script> 
  program = 'program_explorer';
</script>

{% set filter_string = '' %}

{# Loop through Program Topics to see if any need to be hidden and build the filter string #}

{% set option_string = '' %}
{% if paragraph.field_program_explorer_hide_topi[0].value == 'All' %}
  {% set option_string = 'Hide:edit-field-program-topic-value;All' %}
{% else %}
  {% for item in paragraph.field_program_explorer_hide_topi %}
    {% if option_string|length %}
      {% set option_string = option_string ~ ',' ~ item.value|lower|replace({',':'', ' ':'-'}) %}
    {% else %}
      {% set option_string = 'Hide:edit-field-program-topic-value;' ~ item.value|lower|replace({',':'', ' ':'-'}) %}
    {% endif %}
  {% endfor %}
{% endif %}

{% set filter_string = option_string %}

{# Loop through Program Types to see if any need to be hidden and build the filter string #}

{% set option_string = '' %}
{% if paragraph.field_program_explorer_hide_type[0].value == 'All' %}
  {% set option_string = 'Hide:edit-field-program-type-value;All' %}
{% else %}
  {% for item in paragraph.field_program_explorer_hide_type %}
    {% if option_string|length %}
      {% set option_string = option_string ~ ',' ~ item.value %}
    {% else %}
      {% set option_string = 'Hide:edit-field-program-type-value;' ~ item.value %}
    {% endif %}
  {% endfor %}
{% endif %}

{% if filter_string|length and option_string|length %}
  {% set filter_string = filter_string ~ '|' ~ option_string %}
{% else %}
  {% set filter_string = filter_string ~ option_string %}
{% endif %}



{% set topics = "Hide:edit-field-program-topic-value;Animals,Data and Technology,Health and Nutrition:edit-field-program-format-value;All:Department;All|Select:Department;ANSC,HDFS" %}

{% if content.field_program_explorer_type.0['#markup'] == 'full' %}
  {{ drupal_view('programs', 'block_full_program_explorer', filter_string) }}
{% elseif content.field_program_explorer_type.0['#markup'] == 'majorsandtopics' %}
  {{ drupal_view('programs_majors_and_topics', 'block_future_students_program_explorer') }}
{% endif %}

